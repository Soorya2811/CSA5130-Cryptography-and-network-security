#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to prepare the key and fill the Playfair matrix
void prepareKey(char key[], char matrix[][SIZE]) {
    int used[26] = {0};
    int k = 0;

    // Initialize matrix with key
    for (int i = 0; i < strlen(key); i++) {
        if (key[i] == 'J')
            key[i] = 'I'; // Replace 'J' with 'I' (no 'J' in the Playfair matrix)
        if (!used[key[i] - 'A']) {
            matrix[k / SIZE][k % SIZE] = toupper(key[i]);
            used[key[i] - 'A'] = 1;
            k++;
        }
    }

    // Fill remaining matrix with other letters (excluding 'J')
    for (int i = 0; i < 26; i++) {
        if (i != ('J' - 'A') && !used[i]) {
            matrix[k / SIZE][k % SIZE] = 'A' + i;
            k++;
        }
    }
}

// Function to find the positions of characters in the Playfair matrix
void findPosition(char matrix[][SIZE], char a, char b, int *row1, int *col1, int *row2, int *col2) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (matrix[i][j] == a) {
                *row1 = i;
                *col1 = j;
            }
            if (matrix[i][j] == b) {
                *row2 = i;
                *col2 = j;
            }
        }
    }
}

// Function to encrypt plaintext using the Playfair cipher
void encrypt(char plaintext[], char key[], char ciphertext[]) {
    char matrix[SIZE][SIZE];
    prepareKey(key, matrix);

    int len = strlen(plaintext);
    int index = 0;

    // Remove spaces and replace 'J' with 'I' in plaintext
    for (int i = 0; i < len; i++) {
        if (isalpha(plaintext[i])) {
            if (plaintext[i] == 'J')
                plaintext[i] = 'I';
            plaintext[index++] = toupper(plaintext[i]);
        }
    }
    plaintext[index] = '\0';

    index = 0;
    len = strlen(plaintext);

    // Encrypt the plaintext
    for (int i = 0; i < len; i += 2) {
        char a = plaintext[i];
        char b = (i + 1 < len) ? plaintext[i + 1] : 'X'; // If the last pair has only one character, pad with 'X'
        int row1, col1, row2, col2;

        findPosition(matrix, a, b, &row1, &col1, &row2, &col2);

        // Characters on the same row
        if (row1 == row2) {
            ciphertext[index++] = matrix[row1][(col1 + 1) % SIZE];
            ciphertext[index++] = matrix[row2][(col2 + 1) % SIZE];
        }
        // Characters on the same column
        else if (col1 == col2) {
            ciphertext[index++] = matrix[(row1 + 1) % SIZE][col1];
            ciphertext[index++] = matrix[(row2 + 1) % SIZE][col2];
        }
        // Characters form a rectangle
        else {
            ciphertext[index++] = matrix[row1][col2];
            ciphertext[index++] = matrix[row2][col1];
        }
    }
    ciphertext[index] = '\0';
}

int main() {
    char plaintext[] = "Must see you over Cadogan West. Coming at once.";
    char key[] = "MFHIJKUNOPQZVWXYELARGSBCDT";

    char ciphertext[1000];
    encrypt(plaintext, key, ciphertext);

    printf("Encrypted ciphertext: %s\n", ciphertext);

    return 0;
}
OUTPUT:
Encrypted ciphertext: UZBSMSGZPNNWLGHCCPEROVSMSDUHFPERCQOBRZ

