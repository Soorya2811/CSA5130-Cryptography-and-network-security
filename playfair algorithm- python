def generate_playfair_matrix(key):
    key = key.replace(" ", "").upper()
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"  # Without 'J'
    key += alphabet
    matrix = []

    for char in key:
        if char not in matrix and char in alphabet:
            matrix.append(char)

    playfair_matrix = [matrix[i:i + 5] for i in range(0, 25, 5)]
    return playfair_matrix

def get_char_position(matrix, char):
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return i, j

def encrypt_playfair(plaintext, key):
    plaintext = plaintext.replace(" ", "").upper()
    playfair_matrix = generate_playfair_matrix(key)
    encrypted_text = ""

    for i in range(0, len(plaintext), 2):
        char1 = plaintext[i]
        char2 = plaintext[i + 1] if i + 1 < len(plaintext) else 'X'

        row1, col1 = get_char_position(playfair_matrix, char1)
        row2, col2 = get_char_position(playfair_matrix, char2)

        if row1 == row2:  # Same row
            encrypted_text += playfair_matrix[row1][(col1 + 1) % 5]
            encrypted_text += playfair_matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:  # Same column
            encrypted_text += playfair_matrix[(row1 + 1) % 5][col1]
            encrypted_text += playfair_matrix[(row2 + 1) % 5][col2]
        else:  # Different row and column
            encrypted_text += playfair_matrix[row1][col2]
            encrypted_text += playfair_matrix[row2][col1]

    return encrypted_text

def main():
    plaintext = input("Enter the plaintext: ")
    key = input("Enter the key: ")
    encrypted_text = encrypt_playfair(plaintext, key)
    print("Encrypted text:", encrypted_text)

if __name__ == "__main__":
    main()

OUTPUT:
Enter the plaintext: hello 
Enter the key: 2
Encrypted text: KCMMNY
