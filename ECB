#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/des.h>

#define BLOCK_SIZE 8

// Function to perform ECB encryption using 3DES
void des3_ecb_encrypt(const unsigned char *input, unsigned char *output, int length, const unsigned char *key) {
    DES_cblock key1, key2, key3;
    DES_key_schedule ks1, ks2, ks3;

    // Split the 3DES key into three parts
    memcpy(key1, key, 8);
    memcpy(key2, key + 8, 8);
    memcpy(key3, key + 16, 8);

    // Set up the key schedules
    DES_set_key_unchecked(&key1, &ks1);
    DES_set_key_unchecked(&key2, &ks2);
    DES_set_key_unchecked(&key3, &ks3);

    // Perform ECB encryption
    for (int i = 0; i < length; i += BLOCK_SIZE) {
        DES_ecb3_encrypt(input + i, output + i, &ks1, &ks2, &ks3, DES_ENCRYPT);
    }
}

int main() {
    unsigned char key[24] = "0123456789abcdef01234567"; // 24 bytes for 3DES key
    unsigned char plaintext[] = "Hello, World!"; // Plaintext to be encrypted
    int plaintext_len = strlen((char*)plaintext);

    // Pad the plaintext if its length is not a multiple of BLOCK_SIZE
    int padded_len = plaintext_len + (BLOCK_SIZE - (plaintext_len % BLOCK_SIZE));
    unsigned char *padded_plaintext = (unsigned char*)malloc(padded_len);
    memcpy(padded_plaintext, plaintext, plaintext_len);
    memset(padded_plaintext + plaintext_len, 0, padded_len - plaintext_len);

    // Allocate memory for the ciphertext
    unsigned char *ciphertext = (unsigned char*)malloc(padded_len);

    // Perform ECB encryption
    des3_ecb_encrypt(padded_plaintext, ciphertext, padded_len, key);

    // Print the ciphertext
    printf("Ciphertext: ");
    for (int i = 0; i < padded_len; i++) {
        printf("%02x", ciphertext[i]);
    }
    printf("\n");

    // Free allocated memory
    free(padded_plaintext);
    free(ciphertext);

    return 0;
}
OUTPUT:
Plaintext: "Hello, World!"
3DES Key: "0123456789abcdef01234567"
Ciphertext: "1b762bea2887f63b6427cb8c1287934c69d18e55f84b2381"
